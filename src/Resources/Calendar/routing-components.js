// routing-components.js - Routing and components management

// ‡πÉ‡∏´‡πâ AL ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Routing ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
function SetRoutingText(eventsJson, filterProdOrderNo) {
  const events = JSON.parse(eventsJson);
  if (!tabContentRouting) return;

  const filteredEvents = filterProdOrderNo
    ? events.filter(ev => ev.prodOrderNo === filterProdOrderNo)
    : events;

  if (filteredEvents.length === 0) {
    tabContentRouting.innerHTML = '<p>(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Routing)</p>';
    return;
  }

  let html = `
    <h2 class="routing-header mb-4 custom-blue">
      <i class="fas fa-route me-2"></i> ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
    </h2>
    <div class="timeline">
  `;

  filteredEvents.forEach((ev, i) => {
    const index = i + 1;
    const detailId = `routing-detail-${i}`;

    let statusClass = "pending";
    let statusLabel = "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
    let icon = "fa-clock";
    let progress = 0;

    switch (ev.Status) {
      case "Planned":
        statusClass = "pending";
        statusLabel = "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÑ‡∏ß‡πâ";
        icon = "fa-clock";
        progress = 0;
        break;
      case "In Progress":
        statusClass = "inprogress";
        statusLabel = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
        icon = "fa-sync-alt fa-spin";
        progress = 65;
        break;
      case "Finished":
        statusClass = "completed";
        statusLabel = "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå";
        icon = "fa-check-circle";
        progress = 100;
        break;
      default:
        statusClass = "pending";
        statusLabel = "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞";
        icon = "fa-question-circle";
        progress = 0;
    }

    html += `
      <div class="timeline-step ${statusClass}" onclick="viewRouting('${ev.prodOrderNo}')">
        <div class="step-number">${index}</div>
        <div class="step-content">
          <h3 class="step-title">${ev.title}</h3>
          <div class="step-status">
            <i class="fas ${icon} status-icon me-2"></i>
            <span class="status-label">${statusLabel}</span>
          </div>
          <div class="progress-container">
            <div class="progress-bar" style="width: ${progress}%;"></div>
          </div>
          <button class="btn btn-sm btn-toggle mt-2" onclick="event.stopPropagation(); toggleRoutingDetail('${detailId}', this)">
            ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </button>
          <div id="${detailId}" class="routing-detail mt-2" style="display:none;">
            ${ev.other}
          </div>
        </div>
      </div>
    `;
  });

  html += `</div>`;
  tabContentRouting.innerHTML = html;
  showDetailPanel();
}

function toggleRoutingDetail(id, button) {
  const el = document.getElementById(id);
  if (el) {
    const isHidden = el.style.display === "none" || el.style.display === "";
    el.style.display = isHidden ? "block" : "none";
    button.textContent = isHidden ? "‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" : "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î";
  }
}


Microsoft.Dynamics.NAV.RegisterAddInMethod("SetRoutingText", SetRoutingText);

function viewRouting(prodOrderNo) {
   Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("ViewRouting", [prodOrderNo]);
}

function viewProdOrder(id) {
  Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("ViewProdOrder", [id]);
}

function viewComponents(prodOrderNo) {
  Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("ViewComponents", [prodOrderNo]);
}

function SetComponentText(jsonText) {
  const tabContentComponents = document.getElementById("tabContentComponents");

  let components = [];
  try {
    components = JSON.parse(jsonText);
  } catch (e) {
    console.error("‚ùå JSON ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e);
    tabContentComponents.innerHTML = `<p style="color:red;">‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Component</p>`;
    return;
  }

  if (!components || components.length === 0) {
    tabContentComponents.innerHTML = `<p>üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>`;
    return;
  }

  // üè∑Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö (‡∏£‡∏´‡∏±‡∏™ ‚Üí ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
  const unitNameMap = {
    "PCS": "‡∏ä‡∏¥‡πâ‡∏ô",
    "PIECE": "‡∏ä‡∏¥‡πâ‡∏ô",
    "PACK": "‡πÅ‡∏û‡πá‡∏Ñ",
    "PALLET": "‡∏û‡∏≤‡πÄ‡∏•‡∏ó",
    "SET": "‡∏ä‡∏∏‡∏î",
    "TONNE": "‡∏ï‡∏±‡∏ô",
    "KG": "‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°",
    "GR": "‡∏Å‡∏£‡∏±‡∏°",
    "L": "‡∏•‡∏¥‡∏ï‡∏£",
    "ML": "‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£"
  };
  // üéØ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö
  const unitIconMap = {
    "‡∏ä‡∏¥‡πâ‡∏ô": "fas fa-cube fa-bounce",           // ‡∏ä‡∏¥‡πâ‡∏ô/piece - ‡∏Å‡∏£‡∏∞‡∏î‡∏≠‡∏ô
    "‡πÅ‡∏û‡πá‡∏Ñ": "fas fa-box fa-shake",             // ‡πÅ‡∏û‡πá‡∏Ñ - ‡∏™‡∏±‡πà‡∏ô
    "‡∏û‡∏≤‡πÄ‡∏•‡∏ó": "fas fa-pallet fa-flip",          // ‡∏û‡∏≤‡πÄ‡∏•‡∏ó - ‡∏û‡∏•‡∏¥‡∏Å
    "‡∏ä‡∏∏‡∏î": "fas fa-layer-group fa-fade",       // ‡∏ä‡∏∏‡∏î/set - ‡∏à‡∏≤‡∏á‡∏´‡∏≤‡∏¢
    "‡∏ï‡∏±‡∏ô": "fas fa-weight-hanging fa-bounce",  // ‡∏ï‡∏±‡∏ô - ‡∏Å‡∏£‡∏∞‡∏î‡∏≠‡∏ô
    "‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°": "fas fa-balance-scale fa-beat", // ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° - ‡πÄ‡∏ï‡πâ‡∏ô
    "‡∏Å‡∏£‡∏±‡∏°": "fas fa-feather-alt fa-beat-fade", // ‡∏Å‡∏£‡∏±‡∏° - ‡πÄ‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏á‡∏´‡∏≤‡∏¢
    "‡∏•‡∏¥‡∏ï‡∏£": "fas fa-flask fa-shake",           // ‡∏•‡∏¥‡∏ï‡∏£ - ‡∏™‡∏±‡πà‡∏ô
    "‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£": "fas fa-tint fa-bounce",      // ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£ - ‡∏Å‡∏£‡∏∞‡∏î‡∏≠‡∏ô
    "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏": "fas fa-question-circle fa-spin" // ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ - ‡∏´‡∏°‡∏∏‡∏ô
  };

  // üî¢ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö
  const unitTotals = {};
  let latestDate = "";

  components.forEach(c => {
    const qty = parseFloat(c.QuantityPer || 0);
    const unit = (c.UnitofMeasure || "").toUpperCase();
    const unitName = unitNameMap[unit] || unit || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

    if (!unitTotals[unitName]) unitTotals[unitName] = 0;
    unitTotals[unitName] += qty;

    if (c.DueDate && (!latestDate || c.DueDate > latestDate)) {
      latestDate = c.DueDate;
    }
  });

  // üî§ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢
  const unitSummary = Object.entries(unitTotals)
    .map(([unitName, total]) => `${total} ${unitName}`)
    .join(", ");

  let html = `
    <h2 class="custom-blue">
      <i class="fas fa-boxes me-2"></i> ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    </h2>
    <p class="text-muted mb-3">
      ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <strong>${unitSummary}</strong> | Due Date ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: <strong>${latestDate || "-"}</strong>
    </p>
    <ul class="component-list">
  `;

  components.forEach((comp, i) => {
    const id = `component-detail-${i}`;
    const desc = comp.Description || comp.ItemNo || "(‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)";
    const prodOrderNo = comp.prodOrderNo || comp.ProdOrderNo || "";
    const quantity = comp.QuantityPer || "-";
    const due = comp.DueDate || "-";
    const unit = (comp.UnitofMeasure || "").toUpperCase();
    const unitName = unitNameMap[unit] || unit || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    // üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö
    const iconClass = unitIconMap[unitName] || unitIconMap["‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"];

    html += `
      <li class="component-card" onclick="viewComponents('${prodOrderNo}')">
        <div class="component-icon"><i class="${iconClass}"></i></div>
        <div class="flex-grow-1">
          <div class="fw-bold">${desc}</div>
          <div class="text-muted small">Due Date: ${due}</div>
          <button class="btn btn-sm btn-toggle mt-2" onclick="event.stopPropagation(); toggleComponentDetail('${id}', this)">‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
          <div id="${id}" class="routing-detail mt-2" style="display:none;">
            <div><strong>Item No:</strong> ${comp.ItemNo}</div>
            <div><strong>Qty per:</strong> ${quantity} ${unitName}</div>
            <div><strong>Due Date:</strong> ${due}</div>
            <div><strong>Prod Order No:</strong> ${prodOrderNo || '<span style="color:red;">‡πÑ‡∏°‡πà‡∏°‡∏µ</span>'}</div>
          </div>
        </div>
      </li>
    `;
  });

  html += '</ul>';
  tabContentComponents.innerHTML = html;
}

function toggleComponentDetail(id, button) {
  const el = document.getElementById(id);
  if (el) {
    const isHidden = el.style.display === "none" || el.style.display === "";
    el.style.display = isHidden ? "block" : "none";
    button.textContent = isHidden ? "‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" : "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î";
  }
}

function LoadComponentEvents(prodOrderNo) {
  if (prodOrderNo && Microsoft && Microsoft.Dynamics && Microsoft.Dynamics.NAV) {
    Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("LoadProdOrderComponents", [prodOrderNo]);
  }
}